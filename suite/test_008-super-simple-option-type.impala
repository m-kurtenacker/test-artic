// LaunchCode: fooAn

enum Option {
  Some(i32),
  None
}

#[export]
fn foo(A: &mut [i32], n: i32) {
  let buffer = alloc_cpu(n as i64 * sizeof[Option]());
  let B = bitcast[&mut[Option]](buffer.data);
  let buffer2 = alloc_cpu(n as i64 * sizeof[Option]());
  let C = bitcast[&mut[Option]](buffer2.data);

  for i in range(0, n) {
    if A(i) != 0 {
      B(i) = Option::Some(A(i));
    } else {
      B(i) = Option::None;
    }
  }

  let asdf = 42;

  for i in loop(n) {
    C(i) = B(i);
  }

  for i in range(0, n) {
    A(i) = match C(i) { Option::Some(t1) => { t1 }, _ => asdf };
  }

  0
}
